package com.ictdemy.data.entities;

import jakarta.annotation.Nullable;
import jakarta.persistence.*;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import java.util.Collection;
import java.util.List;

/**
 * Entity representing a user in the database.
 * Implements {@link UserDetails} for integration with Spring Security.
 */
@Entity
public class UserEntity implements UserDetails {

    /**
     * The unique identifier for the user.
     * This field is auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private long UserId;

    /**
     * The email address of the user.
     * Must be unique and cannot be null.
     */
    @Column(nullable = false, unique = true)
    private String email;

    /**
     * The password of the user.
     * Stored in an encrypted format.
     */
    @Column(nullable = false)
    private String password;

    /**
     * Indicates whether the user has admin privileges.
     */
    @Column(nullable = false)
    private boolean isAdmin;

    /**
     * Gets the user's unique identifier.
     *
     * @return the user ID.
     */
    public long getUserId() {
        return UserId;
    }

    /**
     * Sets the user's unique identifier.
     *
     * @param userId the user ID.
     */
    public void setUserId(long userId) {
        UserId = userId;
    }

    /**
     * Gets the user's email address.
     *
     * @return the email address.
     */
    public String getEmail() {
        return email;
    }

    /**
     * Sets the user's email address.
     *
     * @param email the email address.
     */
    public void setEmail(String email) {
        this.email = email;
    }

    /**
     * Gets the user's encrypted password.
     *
     * @return the password.
     */
    public String getPassword() {
        return password;
    }

    /**
     * Sets the user's encrypted password.
     *
     * @param password the password.
     */
    public void setPassword(String password) {
        this.password = password;
    }

    /**
     * Checks if the user has admin privileges.
     *
     * @return {@code true} if the user is an admin, {@code false} otherwise.
     */
    public boolean isAdmin() {
        return isAdmin;
    }

    /**
     * Sets the user's admin privileges.
     *
     * @param admin {@code true} if the user is an admin, {@code false} otherwise.
     */
    public void setAdmin(boolean admin) {
        isAdmin = admin;
    }

    /**
     * Gets the authorities granted to the user based on their role.
     *
     * @return a collection of {@link GrantedAuthority}.
     */
    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        SimpleGrantedAuthority authority = new SimpleGrantedAuthority("ROLE_" + (isAdmin ? "ADMIN" : "USER"));
        return List.of(authority);
    }

    /**
     * Gets the username used for authentication (email in this case).
     *
     * @return the email address.
     */
    @Override
    public String getUsername() {
        return email;
    }

    /**
     * Indicates whether the user's account has expired.
     *
     * @return {@code true} since accounts are not set to expire.
     */
    @Override
    public boolean isAccountNonExpired() {
        return true;
    }

    /**
     * Indicates whether the user is locked.
     *
     * @return {@code true} since accounts are not set to lock.
     */
    @Override
    public boolean isAccountNonLocked() {
        return true;
    }

    /**
     * Indicates whether the user's credentials have expired.
     *
     * @return {@code true} since credentials are not set to expire.
     */
    @Override
    public boolean isCredentialsNonExpired() {
        return true;
    }

    /**
     * Indicates whether the user's account is enabled.
     *
     * @return {@code true} since all accounts are considered enabled.
     */
    @Override
    public boolean isEnabled() {
        return true;
    }
}
